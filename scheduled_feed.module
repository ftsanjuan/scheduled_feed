<?php

/**
 * @file
 * Provides data feed functionality based on current timestamp.
 */

require_once dirname(__FILE__) . '/scheduled_feed.inc';
require_once dirname(__FILE__) . '/includes/core.inc';
require_once dirname(__FILE__) . '/custom/scheduled_feed.custom.inc';

define('SCHEDULED_FEED_PERM_ADMIN', 'admin scheduled feed');
define('SCHEDULED_FEED_DAY_SECONDS', 86400);

/**
 * Implements hook_install().
 */
function scheduled_feed_install() {
  // generate vocabulary and store it
  $vocab = (object) array(
    'module' => 'scheduled_feed',
    'name' => 'Scheduled Feed',
    'machine_name' => 'scheduled_feed',
    'description' => 'Contains various scheduled feeds',
  );
  taxonomy_vocabulary_save($vocab);

  // get vid
  $vocab = db_select('taxonomy_vocabulary', 'v')
    ->fields('v')
    ->condition('module', 'scheduled_feed', '=')
    ->execute()
    ->fetch();

  if ( $vocab ) {
    // save this vid to a variable for easy access
    variable_set('scheduled_feed_vid', $vocab->vid);

    // save the primary term to taxonomy db
    $primary = (object) array(
      'vid' => $vocab->vid,
      'name' => 'Primary Scheduled Feed',
      'description' => 'The primary scheduled feed',
    );
    taxonomy_term_save($primary);
    // save the primary tid
    variable_set('scheduled_feed_primary_tid', $primary->tid);
  }
}

/**
 * Implements hook_views_api().
 */
function scheduled_feed_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_menu().
 */
function scheduled_feed_menu() {
  $items['admin/scheduled_feed/add'] = array(
    'title' => 'Scheduled Feed Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scheduled_feed_form_add'),
    'access arguments' => array('admin scheduled feed'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/scheduled_feed/addbydate'] = array(
    'title' => 'Scheduled Feed Add By Date',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scheduled_feed_form_add_by_date'),
    'access arguments' => array('admin scheduled feed'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function scheduled_feed_block_info() {
  $blocks['feed_current'] = array(
    'info' => t('Scheduled Feed Current Data'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function scheduled_feed_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'feed_current':
      $block['subject'] = t('Current Feed');
      $block['content'] = scheduled_feed_data_block();
      break;
    case 'feed_tomorrow':
      $tomorrow = scheduled_feed_day_start_timestamp(time() + SCHEDULED_FEED_DAY_SECONDS);
      $block['subject'] = t('Tomorrow Feed');
      $block['content'] = scheduled_feed_data_block($tomorrow);
      break;

  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function scheduled_feed_theme($existing, $type, $theme, $path) {
  return array(
    'scheduled_feed_block' => array(
      'variables' => array('message' => NULL, 'prize' => NULL, 'prize_image' => NULL),
      'template' => 'custom/templates/block_prize',
    ),
    'scheduled_feed_block_alt' => array(
      'variables' => array('message' => NULL, 'prize' => NULL, 'prize_image' => NULL),
      'template' => 'custom/templates/block_prize_alt',
    )
  );
}

/**
 * Displays a block containing Scheduled Feed's data for the specified time
 * defaults to current time
 */
function scheduled_feed_data_block($time = NULL, $layout = 'scheduled_feed_block') {
  $prize_id = scheduled_feed_get($time);

  if ( is_null($prize_id) || $prize_id == "" ) {
    $message = t("No scheduled data currently available.");
    return theme($layout, array('message' => $message));
  } else {
    $prize = node_load($prize_id);
    $prize_image = file_create_url($prize->field_prize_image['und'][0]['uri']);
    return theme($layout, array('prize' => $prize, 'prize_image' => $prize_image));
  }
}

/**
 * Returns a form for adding a new scheduled data
 */
function scheduled_feed_form_add() {
  $form['data'] = array(
    '#type' => 'textfield',
    '#title' => t('Data to be displayed'),
    '#default_value' => '',
    '#required' => TRUE,
  );
  $form['start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start timestamp'),
    '#default_value' => '',
    '#required' => TRUE,
  );
  $form['end'] = array(
    '#type' => 'textfield',
    '#title' => t('End timestamp'),
    '#default_value' => '',
    '#required' => TRUE,
  );
  $form['is_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set as default data returned?'),
    '#default_value' => FALSE,
  );

  // get terms for dropdown
  $terms = taxonomy_get_tree(scheduled_feed_get_vid());
  $list = array();
  foreach ($terms as $term) {
    $list[$term->tid] = $term->name;
  }

  $form['tid'] = array(
    '#type' => 'select',
    '#title' => 'Feed',
    '#description' => 'The feed this data should be attached to.',
    '#default_value' => scheduled_feed_get_primary_tid(),
    '#options' => $list,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add data'),
  );

  return $form;
}

/**
 * Handles submitting new scheduled data
 */
function scheduled_feed_form_add_submit($form, &$form_state) {
  $data = (object) array(
    'data' => $form_state['values']['data'],
    'start' => $form_state['values']['start'],
    'end' => $form_state['values']['end'],
    'is_default' => $form_state['values']['is_default'],
    'tid' => $form_state['values']['tid'],
  );
  drupal_write_record('scheduled_feed_data', $data);
  // dsm(t("New feed data was successfully saved."));
}

/**
 * Implements hook_form().
 */
function scheduled_feed_form_add_by_date() {
  $current = time();
  $form['data'] = array(
    '#type' => 'textfield',
    '#title' => t('Display Data:'),
    '#required' => TRUE,
  );
  $form['start'] = array(
    '#type' => 'date_popup',
    '#title' => 'Display Start:',
    '#default_value' => date(SCHEDULED_FEED_FORM_TIME_INPUT_FORMAT, $current),
    '#date_format' => SCHEDULED_FEED_FORM_TIME_INPUT_FORMAT,
    '#required' => TRUE,
  );
  $form['end'] = array(
    '#type' => 'date_popup',
    '#title' => 'Display End:',
    '#default_value' => date(SCHEDULED_FEED_FORM_TIME_INPUT_FORMAT, $current),
    '#date_format' => SCHEDULED_FEED_FORM_TIME_INPUT_FORMAT,
    '#required' => TRUE,
  );
  // get terms for dropdown
  $terms = taxonomy_get_tree(scheduled_feed_get_vid());
  $list = array();
  foreach ($terms as $term) {
    $list[$term->tid] = $term->name;
  }

  $form['tid'] = array(
    '#type' => 'select',
    '#title' => 'Feed',
    '#description' => 'The feed this data should be attached to.',
    '#default_value' => scheduled_feed_get_primary_tid(),
    '#options' => $list,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add Data to Feed',
  );

  return $form;
}

/**
 * Validation : Scheduled Feed Form Add by Date
 */
function scheduled_feed_form_add_by_date_validate($form, &$form_state) {
  $start = scheduled_feed_date_array_to_timestamp($form_state['values']['start']);
  $end = scheduled_feed_date_array_to_timestamp($form_state['values']['end']);

  // dsm($form_state['values']['start']);

  // verify the dates are chronologically sound
  if ( $start > $end ) {
    form_set_error('start', t('Start date must come before end date'));
  }
}

/**
 * Submission : Scheduled Feed Form Add by Date
 */
function scheduled_feed_form_add_by_date_submit($form, &$form_state) {
  $start = scheduled_feed_date_array_to_timestamp($form_state['values']['start']);
  $end = scheduled_feed_date_array_to_timestamp($form_state['values']['end']);

  // write scheduled data to db
  $data = array(
    'data' => $form_state['values']['data'],
    'start' => $start,
    'end' => $end,
    'is_default' => FALSE,
    'tid' => scheduled_feed_get_primary_tid(),
  );

  $result = drupal_write_record('scheduled_feed_data', $data);
  if ( $result ) {
    dsm(t('Data successfully added to feed.'));
  }
  else {
    dsm(t('There was a problem adding the data to the feed.'));
  }

}